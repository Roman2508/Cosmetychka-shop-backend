import type { CollectionConfig } from 'payload'

export const Orders: CollectionConfig = {
  slug: 'orders',
  labels: {
    singular: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è',
    plural: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è',
  },
  access: {
    read: () => true,
    create: () => true,
  },
  fields: [
    {
      name: 'status',
      label: '–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è',
      type: 'select',
      required: false,
      options: [
        { label: '–û—á—ñ–∫—É—î—Ç—å—Å—è', value: 'pending' },
        { label: '–í–∏–∫–æ–Ω—É—î—Ç—å—Å—è', value: 'processing' },
        { label: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', value: 'completed' },
        { label: '–°–∫–∞—Å–æ–≤–∞–Ω–æ', value: 'cancelled' },
      ],
      defaultValue: 'pending',
    },
    {
      name: 'username',
      label: '–ü–Ü–ë',
      type: 'text',
      required: true,
    },
    {
      name: 'phone',
      label: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É',
      type: 'text',
      required: true,
    },
    {
      name: 'note',
      label: '–ü—Ä–∏–º—ñ—Ç–∫–∞',
      type: 'text',
      required: false,
    },
    {
      name: 'totalPrice',
      label: '–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞',
      type: 'number',
      // admin: { readOnly: true },
    },
    {
      name: 'products',
      type: 'array',
      fields: [
        {
          label: '–¢–æ–≤–∞—Ä',
          name: 'product',
          type: 'relationship',
          relationTo: 'products',
          required: true,
          hasMany: false,
        },
        { name: 'quantity', label: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å', required: true, type: 'number' },
      ],
    },
  ],

  hooks: {
    beforeChange: [
      async ({ data, req }) => {
        const orderedProductsId: number[] = data.products.map((el: any) => el.product)

        const products = await req.payload.find({
          collection: 'products',
          where: { id: { in: orderedProductsId } },
        })

        const nameMap = products.docs.map((prod) => ({ id: prod.id, name: prod.name }))

        const productList = data.products.map(
          (product: { product: number; quantity: number }, index: number) => {
            const currentProduct = nameMap.find((el) => el.id === product.product)
            return `${index + 1}. ${currentProduct ? currentProduct.name : '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–æ–≤–∞—Ä'} ‚Äî <b>${product.quantity} —à—Ç.</b>`
          },
        )

        const telegramText = `
<b>üõí –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø!</b>\n
<b>üë§ –Ü–º'—è:</b> ${data.username}\n
<b>üìû –¢–µ–ª–µ—Ñ–æ–Ω:</b> ${data.phone}\n
<b>üìù –ö–æ–º–µ–Ω—Ç–∞—Ä:</b> ${data.note || '-'}\n
<b>üì¶ –¢–æ–≤–∞—Ä–∏:</b>\n${productList.join('\n')}\n
<b>üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> ${data.totalPrice} –≥—Ä–Ω
`

        await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: process.env.TELEGRAM_CHAT_ID,
            text: telegramText,
            parse_mode: 'HTML',
          }),
        })

        return data
      },
    ],
  },
}
